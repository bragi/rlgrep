#!/usr/bin/env ruby

require 'rubygems'
require 'facets/shellwords'
require 'ansi'
require 'getoptlong'

class NilClass
  def blank?
    true
  end
end

class String
  def blank?
    self.strip == ""
  end
end

class RLGrep
  attr_accessor :files, :regexp, :file_name, :stdin, :needs_cleanup, :needs_colorize, :highlighted, :highlighted_params
  
  def initialize
    parse_arguments
  end
  
  def parse_arguments
    options = GetoptLong.new(
      ['--stdin', '-s', GetoptLong::REQUIRED_ARGUMENT],
      ['--cleanup', '-x', GetoptLong::NO_ARGUMENT],
      ['--colorize', '-c', GetoptLong::NO_ARGUMENT],
      ['--highlight', '-i', GetoptLong::REQUIRED_ARGUMENT],
      ['--highlight-param', '-p', GetoptLong::REQUIRED_ARGUMENT]
    )
    options.each do |option, arg|
      case option
      when '--stdin' 
        self.stdin = true
        self.file_name = arg
      when '--cleanup'
        self.needs_cleanup = true
      when '--colorize'
        self.needs_colorize = true
      when '--highlight'
        self.highlighted = arg
      when '--highlight-param'
        self.highlighted_params = arg
      end
    end
    self.regexp = Regexp.new ARGV.shift
    self.files = ARGV
  end
  
  def puts_file_name_if_needed
    unless @file_name_putted
      puts ANSI.color(:red) {file_name}
      @file_name_putted = true
    end
  end
  
  def block_matches(block)
    block =~ regexp
  end
  
  def each_block
    STDIN.read.split("\n\nProcessing").each do |block|
      yield "\n\nProcessing" + block
    end
  end
  
  
  SESSION_REGEXP = %r"^  Session ID: (\w+\n)+\w+(=*)--\w+\n"m
  TRANSLATION_REGEXP = %r"^.*\[Translation cache\].*\n"
  COLORIZE_REGEXP= %r"^Processing ([^(]+) \((.*)\) \[(\w+)\]$"
  
  def colorize(block)
    block.gsub(COLORIZE_REGEXP) do
      "Processing %s (%s) [%s]" % [ANSI.color(:cyan) {$1}, $2, ANSI.color(:yellow) {$3}]
    end
  end
  
  def highlight(block, highlighted)
    block.gsub(highlighted) do
      ANSI.color(:green) {$1}
    end
  end
  
  def highlight_params(block)
    highlighted_params.split(",").each do |param|
      block = highlight(block, /("#{param}"=>("[^"]+"|\{[^}]+\}))/)
    end
    block
  end
  
  def start_stdin
    each_block do |block|
      if block_matches(block)
        block = block.gsub(SESSION_REGEXP, '').gsub(TRANSLATION_REGEXP, '') if needs_cleanup
        block = colorize(block) if needs_colorize
        block = highlight(block, /(#{highlighted})/) unless highlighted.blank?
        block = highlight_params(block) unless highlighted_params.blank?
        puts_file_name_if_needed
        begin
          puts block 
        rescue Errno::EPIPE
          exit(1)
        end
      end
    end
  end
  
  def start_multiple
    files.each do |file|
      cat = (file =~ /.gz$/) ? 'gzip -c -d' : 'cat'
      command_line = "#{cat} #{file} | #{$0} --stdin=#{Shellwords::escape(file)} #{Shellwords::escape(regexp.to_s)}"
      command_line += " -x" if needs_cleanup
      command_line += " -c" if needs_colorize
      command_line += " --highlight=#{Shellwords::escape(highlighted)}" unless highlighted.blank?
      command_line += " --highlight-param=#{Shellwords::escape(highlighted_params)}" unless highlighted_params.blank?
      system(command_line)
      return unless $? == 0
    end
  end
  
  def start
    if stdin
      start_stdin
    else
      start_multiple
    end
  end
end

RLGrep.new.start
